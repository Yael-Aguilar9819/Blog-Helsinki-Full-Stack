{"version":3,"sources":["components/BlogDetailedView.module.css","components/BlogSimplifiedView.module.css","components/Blog.module.css","components/BlogSimplifiedView.js","components/BlogDetailedView.js","components/Blog.js","components/ListOfBlogs.js","components/NewBlogForm.js","components/LoginForm.js","components/Notification.js","components/Togglable.js","services/blogs.js","services/login.js","App.js","index.js","components/Notification.module.css"],"names":["module","exports","BlogSimplifiedView","title","author","visiblityFunc","type","className","styles","buttonWithFunction","onClick","BlogDetailedView","blogInfo","addLikeFunc","removeBlogFunc","url","likes","user","name","Blog","blog","likeFunction","useState","detailsShown","setDetailsShown","blogVisibility","composedLikeFunc","composedRemoveFunc","window","confirm","RenderAccordingToVisibility","blogSeparator","ListOfBlogs","blogs","removeBlogFunction","map","id","NewBlogForm","createNewBlogServ","messageAsTitle","newBlogInfo","setNewBlogInfo","handlePropertyOfNewBlog","target","property","newBlog","visuallyAddNote","event","a","preventDefault","emptyNewBlogInfo","Object","keys","reduce","value","onSubmit","onChange","LoginForm","loginFunc","nameField","setNameFunc","passField","setPassFunc","Notification","messageInfo","message","status","positiveContainer","positiveMessage","negativeContainer","negativeMessage","defaultProps","Togglable","React","forwardRef","ref","buttonLabel","children","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","baseUrl","tokenToAuthorize","methodToBackendReturnJson","method","body","tokenFromUser","fetch","headers","Accept","Authorization","response","Error","json","getAll","exportedObject","create","newObject","JSON","stringify","update","setToken","newToken","deleteBlog","login","credentials","exportedFunc","nameToStoreUserInfo","NOTIFICATION","App","setBlogs","username","setUsername","password","setPassword","setUser","notificationMessage","setNotificationMessage","newBlogFormRef","useRef","useEffect","fetchBlogs","blogService","remoteBlogs","sortBlogsAndSetThem","loggedUserJSON","localStorage","getItem","userInfo","parse","token","handleLogin","loginService","loggedUserInfo","setItem","createTemporalMessageFor5Secs","addNewBlogToServer","newBlogAddedByUser","current","respFromServ","concat","addLikeToABlog","blogToAddANewLike","blogToSend","blogsNowReplaced","replaceBlogWithSameIDInArray","removeBlog","blogToRemove","removedFromBlogs","filter","blogToAdd","arrayOfBlogs","blogIndex","findIndex","slice","setTimeout","blogsOrdered","sort","actBlog","lastBlog","removeItem","ReactDOM","render","document","getElementById"],"mappings":"gHACAA,EAAOC,QAAU,CAAC,mBAAqB,+C,mBCAvCD,EAAOC,QAAU,CAAC,mBAAqB,iD,mBCAvCD,EAAOC,QAAU,CAAC,cAAgB,8B,iJC0BnBC,EAtBY,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAQC,EAAlB,EAAkBA,cAAlB,OACzB,gCACGF,EACA,IACAC,EACD,wBACEE,KAAK,SACLC,UAAWC,IAAOC,mBAClBC,QAASL,EAHX,sB,iBC0DWM,EA9DU,SAAC,GAAD,IACvBC,EADuB,EACvBA,SAAUP,EADa,EACbA,cAAeQ,EADF,EACEA,YAAaC,EADf,EACeA,eADf,OAGvB,gCACGF,EAAST,MACT,IACAS,EAASR,OACV,wBACEE,KAAK,SACLC,UAAWC,IAAOC,mBAClBC,QAASL,EAHX,kBAOA,uBACCO,EAASG,IACV,uBAbF,QAeG,IACAH,EAASI,MAEV,wBACEV,KAAK,SACLC,UAAWC,IAAOC,mBAClBC,QAASG,EAHX,kBAQA,uBACCD,EAASK,KAAKC,KACf,uBACA,wBACEZ,KAAK,SACLI,QAASI,EAFX,wB,iBC+BWK,EA/DF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,aAAcP,EAAqB,EAArBA,eAClC,EAAwCQ,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAGMC,EAAiB,WACrBD,GAAiBD,IAIbG,EAAmB,WACvBL,EAAaD,IAGTO,EAAqB,WAErBC,OAAOC,QAAP,sBAA8BT,EAAKjB,MAAnC,eAA+CiB,EAAKhB,UACtDU,EAAeM,IAMbU,EAA8B,WAClC,OAAIP,EAEA,cAAC,EAAD,CACEX,SAAUQ,EACVP,YAAaa,EACbrB,cAAeoB,EACfX,eAAgBa,IAKpB,cAAC,EAAD,CACExB,MAAOiB,EAAKjB,MACZC,OAAQgB,EAAKhB,OACbC,cAAeoB,KAMrB,OACE,qBAAKlB,UAAWC,IAAOuB,cAAvB,SACE,cAACD,EAAD,OCrCSE,EAXK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOZ,EAAV,EAAUA,aAAca,EAAxB,EAAwBA,mBAAxB,OAClBD,EAAME,KAAI,SAAAf,GAAI,OACZ,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdP,eAAgBoB,GAHXd,EAAKgB,QC6EDC,EA/EK,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,kBAAmBC,EAAqB,EAArBA,eAExC,EAAsCjB,mBAAS,CAAEnB,MAAO,GAAIC,OAAQ,GAAIW,IAAK,KAA7E,mBAAOyB,EAAP,KAAoBC,EAApB,KAEMC,EAA0B,SAACC,EAAQC,GAGvC,IAAMC,EAAO,eAAQL,GAErBK,EAAQD,GAAYD,EACpBF,EAAeI,IAGXC,EAAe,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sDACtBD,EAAME,iBAEAC,EAAmBC,OAAOC,KAAKZ,GAElCa,QAAO,SAACT,EAAUU,GAMjB,OAFAV,EAASU,GAAS,GAEXV,IACN,IAGLN,EAAkBE,GAElBC,EAAeS,GAjBO,2CAAH,sDAoBrB,OACE,gCACE,6BAAKX,IAGL,uBAAMgB,SAAUT,EAAhB,UAEE,yCAEE,uBACExC,KAAK,OACLgD,MAAOd,EAAYrC,MACnBe,KAAK,QACLsC,SAAU,gBAAGb,EAAH,EAAGA,OAAH,OAAgBD,EAAwBC,EAAOW,MAAO,eAGpE,0CAEE,uBACEhD,KAAK,OACLgD,MAAOd,EAAYpC,OACnBc,KAAK,SACLsC,SAAU,gBAAGb,EAAH,EAAGA,OAAH,OAAgBD,EAAwBC,EAAOW,MAAO,gBAGpE,uCAEE,uBACEhD,KAAK,OACLgD,MAAOd,EAAYzB,IACnBG,KAAK,MACLsC,SAAU,gBAAGb,EAAH,EAAGA,OAAH,OAAgBD,EAAwBC,EAAOW,MAAO,aAGpE,wBAAQhD,KAAK,SAAb,2BC/BOmD,EApCG,SAAC,GAAD,IAChBC,EADgB,EAChBA,UAAWC,EADK,EACLA,UAAWC,EADN,EACMA,YAAaC,EADnB,EACmBA,UAAWC,EAD9B,EAC8BA,YAD9B,OAGhB,uBAAMP,SAAUG,EAAhB,UAEE,2CAEE,uBACEpD,KAAK,OACLgD,MAAOK,EACPzC,KAAK,WACLsC,SAAU,gBAAGb,EAAH,EAAGA,OAAH,OAAgBiB,EAAYjB,EAAOW,aAGjD,2CAEE,uBACEhD,KAAK,WACLgD,MAAOO,EACP3C,KAAK,WACLsC,SAAU,gBAAGb,EAAH,EAAGA,OAAH,OAAgBmB,EAAYnB,EAAOW,aAGjD,wBAAQhD,KAAK,SAAb,uB,gBCvBEyD,EAAe,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACtB,GAAoB,OAAhBA,EACF,OACE,KAIJ,IAAQC,EAAoBD,EAApBC,QAGR,MAAe,aAHaD,EAAXE,OAKb,qBAAK3D,UAAWC,IAAO2D,kBAAvB,SACE,oBAAI5D,UAAWC,IAAO4D,gBAAtB,SAAwCH,MAO5C,qBAAK1D,UAAWC,IAAO6D,kBAAvB,SACE,oBAAI9D,UAAWC,IAAO8D,gBAAtB,SAAwCL,OAe9CF,EAAaQ,aAAe,CAC1BP,YAAa,MAGAD,QCAAS,EAvCGC,IAAMC,YAAW,WAA4BC,GAAS,IAAlCC,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,SACjD,EAA8BvD,oBAAS,GAAvC,mBAAOwD,EAAP,KAAgBC,EAAhB,KAGMC,EAAkB,CAAEC,QAASH,EAAU,OAAS,IAChDI,EAAkB,CAAED,QAASH,EAAU,GAAK,QAI5CK,EAAmB,WACvBJ,GAAYD,IASd,OAJAM,8BAAoBT,GAAK,iBAAO,CAC9BQ,uBAIA,gCACE,qBAAKE,MAAOL,EAAZ,SACE,wBAAQ1E,KAAK,SAASI,QAASyE,EAA/B,SAAkDP,MAEpD,sBAAKS,MAAOH,EAAZ,UAEGL,EACD,wBAAQvE,KAAK,SAASI,QAASyE,EAA/B,6BChCFG,EAAU,aAEZC,EAAmB,KAMjBC,EAAyB,uCAAG,WAAOzE,EAAK0E,EAAQC,EAAMC,GAA1B,eAAA3C,EAAA,sEACT4C,MAAM7E,EAAK,CAChC0E,SACAI,QAAS,CACPC,OAAQ,mBACR,eAAgB,mBAChBC,cAAeJ,GAEjBD,SAR8B,aAC1BM,EAD0B,QAYnB9B,OAAS,KAAO8B,EAAS9B,OAAS,KAZf,sBAaxB,IAAI+B,MAAJ,6CAAgDD,EAAS9B,SAbjC,UAcD,MAApB8B,EAAS9B,OAdY,yCAgBvB,4BAhBuB,gCAmBzB8B,EAASE,QAnBgB,4CAAH,4DA4BzBC,EAAM,uCAAG,4BAAAnD,EAAA,sEACU4C,MAAMN,GADhB,cACPU,EADO,yBAENA,EAASE,QAFH,2CAAH,qDAaGE,EARQ,CACrBD,SACAE,OAba,SAAAC,GAAS,OAAId,EAA0BF,EAAS,OAAQiB,KAAKC,UAAUF,GAAYf,IAchGkB,OAZa,SAACrE,EAAIkE,GAAL,OAAmBd,EAA0B,GAAD,OAAIF,EAAJ,YAAelD,GAAM,MAAOmE,KAAKC,UAAUF,GAAYf,IAahHmB,SAzCe,SAAAC,GACfpB,EAAgB,iBAAaoB,IAyC7BC,WAZiB,SAAAxE,GAAE,OAAIoD,EAA0B,GAAD,OAAIF,EAAJ,YAAelD,GAAM,SAAU,GAAImD,KC9B/EsB,EAAK,uCAAG,WAAMC,GAAN,eAAA9D,EAAA,sEACW4C,MALT,aAKwB,CACpCH,OAAQ,OACRI,QAAS,CACP,eAAgB,oBAElBH,KAAMa,KAAKC,UAAUM,KANX,cACNd,EADM,yBASLA,EAASE,QATJ,2CAAH,sDAgBIa,EAJM,CACnBF,SCNIG,EAAsB,iBACtBC,EACM,WADNA,EAEM,WAyMGC,EAtMH,WACV,MAA0B5F,mBAAS,IAAnC,mBAAOW,EAAP,KAAckF,EAAd,KACA,EAAgC7F,mBAAS,IAAzC,mBAAO8F,EAAP,KAAiBC,EAAjB,KACA,EAAgC/F,mBAAS,IAAzC,mBAAOgG,EAAP,KAAiBC,EAAjB,KACA,EAAwBjG,mBAAS,MAAjC,mBAAOL,EAAP,KAAauG,EAAb,KACA,EAAsDlG,mBAAS,MAA/D,mBAAOmG,EAAP,KAA4BC,EAA5B,KACMC,EAAiBC,mBAEvBC,qBAAU,WAIR,IAAMC,EAAU,uCAAG,4BAAA9E,EAAA,sEACS+E,EAAY5B,SADrB,OACX6B,EADW,OAEjBC,EAAoBD,GAFH,2CAAH,qDAIhBF,MACC,IAEHD,qBAAU,WAGR,IAAMK,EAAiBtG,OAAOuG,aAAaC,QAAQpB,GACnD,GAAIkB,EAAgB,CAClB,IAAMG,EAAW9B,KAAK+B,MAAMJ,GAC5BV,EAAQa,GACRN,EAAYrB,SAAS2B,EAASE,UAE/B,IAGH,IAAMC,EAAW,uCAAG,WAAMzF,GAAN,eAAAC,EAAA,6DAClBD,EAAME,iBADY,kBAGawF,EAAa5B,MAAM,CAC9CO,WAAUE,aAJI,UAGVoB,EAHU,OAOhB9G,OAAOuG,aAAaQ,QAClB,oBAAqBpC,KAAKC,UAAUkC,IAGtCX,EAAYrB,SAASgC,EAAeH,OAG/BG,EAAeH,MAdJ,wBAedK,EAA8B,oBAAqB3B,GAfrC,2BAmBhB2B,EAA8B,sBAAuB3B,GACrDrF,OAAOuG,aAAaQ,QAAQ3B,EAAqBT,KAAKC,UAAUkC,IAChElB,EAAQkB,GACRrB,EAAY,IACZE,EAAY,IAvBI,kDAyBhBqB,EAA8B,EAAD,GAAY3B,GAzBzB,0DAAH,sDA+BX4B,EAAkB,uCAAG,WAAMC,GAAN,eAAA9F,EAAA,sEAGvB2E,EAAeoB,QAAQ5D,mBAHA,SAKI4C,EAAY1B,OAAOyC,GALvB,OAKjBE,EALiB,OASvBf,EAAoBhG,EAAMgH,OAAOD,IAEjCJ,EAA8B,0BAA2B3B,GAXlC,gDAavB2B,EAA8B,mBAAoB3B,GAb3B,yDAAH,sDA2BlBiC,EAAc,uCAAG,WAAMC,GAAN,mBAAAnG,EAAA,sEAIboG,EAJa,2BAKdD,GALc,IAMjBnI,MAAOmI,EAAkBnI,MAAQ,EACjCC,KAAMkI,EAAkBlI,KAAKmB,KAPZ,SASQ2F,EAAYtB,OAAO2C,EAAWhH,GAAIgH,GAT1C,OASbJ,EATa,OAWbK,EAAmBC,EAA6BN,EAAc/G,GAEpEgG,EAAoBoB,GACpBT,EAA8B,oCAAqC3B,GAdhD,kDAgBnB2B,EAA8B,oBAAqB3B,GAhBhC,0DAAH,sDAoBdsC,EAAU,uCAAG,WAAMC,GAAN,eAAAxG,EAAA,+EAET+E,EAAYnB,WAAW4C,EAAapH,IAF3B,OAITqH,EAAmBxH,EAAMyH,QAAO,SAAAtI,GAAI,OAAIA,EAAKgB,KAAOoH,EAAapH,MACvE6F,EAAoBwB,GAEpBb,EAA8B,GAAD,OAAIY,EAAarJ,MAAjB,iBAC3B8G,GARa,gDAUf2B,EAA8B,oBAAqB3B,GAVpC,yDAAH,sDAeVqC,EAA+B,SAACK,EAAWC,GAC/C,IAAMC,EAAYD,EAAaE,WAC7B,SAAA1I,GAAI,OAAIA,EAAKgB,KAAOuH,EAAUvH,MAMhC,OAHyBwH,EAAaG,MAAM,EAAGF,GAAWZ,OAAOU,EAC/DC,EAAaG,MAAMF,EAAY,KAM7BjB,EAAgC,SAAC3E,EAASC,GAC9CwD,EAAuB,CACrBzD,UAASC,WAGX8F,YAAW,WACTtC,EAAuB,QACtB,MAKCO,EAAsB,SAAA2B,GAC1B,IAAMK,EAAe,YAAIL,GAAcM,MAAK,SAACC,EAASC,GACpD,OAAID,EAAQnJ,MAAQoJ,EAASpJ,OAAiB,EAC1CoJ,EAASpJ,MAAQmJ,EAAQnJ,MAAgB,EACtC,KAETmG,EAAS8C,IAGX,OACE,gCACE,cAAC,EAAD,CAAcjG,YAAayD,IACjB,OAATxG,EAEG,cAAC,EAAD,CACEyC,UAAW8E,EACX7E,UAAWyD,EACXxD,YAAayD,EACbxD,UAAWyD,EACXxD,YAAayD,IAIf,gCACE,gCACE,oBAAGhH,UAAU,qBAAb,UACGU,EAAKmG,SACL,IAFH,eAKA,wBAAQ1G,QAjGG,WACrBkB,OAAOuG,aAAakC,WAAWrD,GAC/Be,EAAYrB,SAAS,QACrBkC,EAA8B,0BAA2B3B,GACzDO,EAAQ,OA6FmClH,KAAK,SAAtC,qBAEA,cAAC,EAAD,CAAWsE,YAAY,cAAcD,IAAKgD,EAA1C,SACE,cAAC,EAAD,CACErF,kBAAmBuG,EACnBtG,eAAe,yBAIrB,cAAC,EAAD,CACEN,MAAOA,EACPZ,aAAc6H,EACdhH,mBAAoBqH,WC3MlCe,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U,kBCHjDzK,EAAOC,QAAU,CAAC,aAAe,mCAAmC,gBAAkB,uEAAuE,gBAAkB,uEAAuE,kBAAoB,wCAAwC,kBAAoB,2C","file":"static/js/main.6a4b1e66.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWithFunction\":\"BlogDetailedView_buttonWithFunction__nUW_Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonWithFunction\":\"BlogSimplifiedView_buttonWithFunction__3U7Wg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blogSeparator\":\"Blog_blogSeparator__2iU4h\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './BlogSimplifiedView.module.css';\r\n\r\n// This jus separates the blog simplified view from the rest of the blog data\r\nconst BlogSimplifiedView = ({ title, author, visiblityFunc }) => (\r\n  <div>\r\n    {title}\r\n    {' '}\r\n    {author}\r\n    <button\r\n      type=\"submit\"\r\n      className={styles.buttonWithFunction}\r\n      onClick={visiblityFunc}\r\n    >\r\n      View\r\n    </button>\r\n  </div>\r\n);\r\n\r\n// It's pretty simple, but still required\r\nBlogSimplifiedView.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  author: PropTypes.string.isRequired,\r\n  visiblityFunc: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default BlogSimplifiedView;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './BlogDetailedView.module.css';\r\n\r\n// const formatUserIDInBlogs = userID => JSON.stringify(userID).slice(1, -1);\r\n// This just separates the blog simplified view from the rest of the blog data\r\nconst BlogDetailedView = ({\r\n  blogInfo, visiblityFunc, addLikeFunc, removeBlogFunc,\r\n}) => (\r\n  <div>\r\n    {blogInfo.title}\r\n    {' '}\r\n    {blogInfo.author}\r\n    <button\r\n      type=\"submit\"\r\n      className={styles.buttonWithFunction}\r\n      onClick={visiblityFunc}\r\n    >\r\n      Hide\r\n    </button>\r\n    <br />\r\n    {blogInfo.url}\r\n    <br />\r\n    Likes\r\n    {' '}\r\n    {blogInfo.likes}\r\n    {/* This button will add +1 to the like count */}\r\n    <button\r\n      type=\"submit\"\r\n      className={styles.buttonWithFunction}\r\n      onClick={addLikeFunc}\r\n    >\r\n      Like\r\n    </button>\r\n\r\n    <br />\r\n    {blogInfo.user.name}\r\n    <br />\r\n    <button\r\n      type=\"submit\"\r\n      onClick={removeBlogFunc}\r\n    >\r\n      Remove\r\n    </button>\r\n\r\n  </div>\r\n\r\n);\r\n\r\n// Every property of the blog we are going to use\r\nBlogDetailedView.propTypes = {\r\n  blogInfo: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    author: PropTypes.string.isRequired,\r\n    url: PropTypes.string.isRequired,\r\n    likes: PropTypes.number.isRequired,\r\n    // All of the properties of user are made of strings\r\n    user: PropTypes.objectOf(PropTypes.string).isRequired,\r\n  }).isRequired,\r\n\r\n  // This is the function that controls the render\r\n  visiblityFunc: PropTypes.func.isRequired,\r\n\r\n  // This function controls the button that adds a like\r\n  addLikeFunc: PropTypes.func.isRequired,\r\n  removeBlogFunc: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default BlogDetailedView;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport BlogSimplifiedView from './BlogSimplifiedView';\r\nimport BlogDetailedView from './BlogDetailedView';\r\nimport styles from './Blog.module.css';\r\n\r\nconst Blog = ({ blog, likeFunction, removeBlogFunc }) => {\r\n  const [detailsShown, setDetailsShown] = useState(false);\r\n\r\n  // This function inverses what is shown after each press of the button\r\n  const blogVisibility = () => {\r\n    setDetailsShown(!detailsShown);\r\n  };\r\n\r\n  // This composes functions that retrieves the blog info to the main app\r\n  const composedLikeFunc = () => {\r\n    likeFunction(blog);\r\n  };\r\n\r\n  const composedRemoveFunc = () => {\r\n    // This will execute if the user accepts the windows prompt\r\n    if (window.confirm(`Remove blog ${blog.title} by ${blog.author}`)) {\r\n      removeBlogFunc(blog);\r\n    }\r\n    // otherwise, it doesnt do anything\r\n  };\r\n\r\n  // This function will select what kind of blog to render if\r\n  const RenderAccordingToVisibility = () => {\r\n    if (detailsShown) {\r\n      return (\r\n        <BlogDetailedView\r\n          blogInfo={blog}\r\n          addLikeFunc={composedLikeFunc}\r\n          visiblityFunc={blogVisibility}\r\n          removeBlogFunc={composedRemoveFunc}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <BlogSimplifiedView\r\n        title={blog.title}\r\n        author={blog.author}\r\n        visiblityFunc={blogVisibility}\r\n      />\r\n    );\r\n  };\r\n\r\n  // ternary\r\n  return (\r\n    <div className={styles.blogSeparator}>\r\n      <RenderAccordingToVisibility />\r\n    </div>\r\n  );\r\n};\r\n\r\n// This is a small type validation because this project is not using typescript\r\nBlog.propTypes = {\r\n  // shape instead of objectOf because the categories are known before\r\n  blog: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    author: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  // Required at the end, so the component needs the blog name\r\n\r\n  likeFunction: PropTypes.func.isRequired,\r\n  removeBlogFunc: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Blog;\r\n","import React from 'react';\r\nimport Blog from './Blog';\r\n\r\nconst ListOfBlogs = ({ blogs, likeFunction, removeBlogFunction }) => (\r\n  blogs.map(blog => (\r\n    <Blog\r\n      key={blog.id}\r\n      blog={blog}\r\n      likeFunction={likeFunction}\r\n      removeBlogFunc={removeBlogFunction}\r\n    />\r\n  ))\r\n);\r\n\r\nexport default ListOfBlogs;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// login form is the main component of the login functions\r\nconst NewBlogForm = ({ createNewBlogServ, messageAsTitle }) => {\r\n  // This creates a default new object\r\n  const [newBlogInfo, setNewBlogInfo] = useState({ title: '', author: '', url: '' });\r\n\r\n  const handlePropertyOfNewBlog = (target, property) => {\r\n    // Not really efficient, but only happens every keystroke\r\n    // From the user\r\n    const newBlog = { ...newBlogInfo };\r\n    // Using [] the previous info in the property can be modified\r\n    newBlog[property] = target;\r\n    setNewBlogInfo(newBlog);\r\n  };\r\n\r\n  const visuallyAddNote = async event => {\r\n    event.preventDefault();\r\n\r\n    const emptyNewBlogInfo = Object.keys(newBlogInfo)\r\n    // This reduce function makes every property an empty String\r\n      .reduce((property, value) => {\r\n        // In this specific case, it's not bad because\r\n        // The object is an inner object\r\n        /* eslint-disable no-param-reassign */\r\n        property[value] = '';\r\n        /* eslint-enable no-param-reassign */\r\n        return property;\r\n      }, {});\r\n\r\n    // This offloads everything outside of this form to the main app\r\n    createNewBlogServ(newBlogInfo);\r\n\r\n    setNewBlogInfo(emptyNewBlogInfo);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{messageAsTitle}</h2>\r\n\r\n      {/* // This is the function that controls how the info inside the form is used */}\r\n      <form onSubmit={visuallyAddNote}>\r\n        {/* to be separated in different components */}\r\n        <div>\r\n          Title:\r\n          <input\r\n            type=\"text\"\r\n            value={newBlogInfo.title}\r\n            name=\"Title\"\r\n            onChange={({ target }) => handlePropertyOfNewBlog(target.value, 'title')}\r\n          />\r\n        </div>\r\n        <div>\r\n          Author:\r\n          <input\r\n            type=\"text\"\r\n            value={newBlogInfo.author}\r\n            name=\"Author\"\r\n            onChange={({ target }) => handlePropertyOfNewBlog(target.value, 'author')}\r\n          />\r\n        </div>\r\n        <div>\r\n          URL:\r\n          <input\r\n            type=\"text\"\r\n            value={newBlogInfo.url}\r\n            name=\"URL\"\r\n            onChange={({ target }) => handlePropertyOfNewBlog(target.value, 'url')}\r\n          />\r\n        </div>\r\n        <button type=\"submit\">Create</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n// This will add a small amount of type safety\r\nNewBlogForm.propTypes = {\r\n  createNewBlogServ: PropTypes.func.isRequired,\r\n  messageAsTitle: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default NewBlogForm;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// login form is the main component of the login functions\r\nconst LoginForm = ({\r\n  loginFunc, nameField, setNameFunc, passField, setPassFunc,\r\n}) => (\r\n  <form onSubmit={loginFunc}>\r\n    {/* each of this 2 are an input. To be reworked in a component */}\r\n    <div>\r\n      username\r\n      <input\r\n        type=\"text\"\r\n        value={nameField}\r\n        name=\"Username\"\r\n        onChange={({ target }) => setNameFunc(target.value)}\r\n      />\r\n    </div>\r\n    <div>\r\n      password\r\n      <input\r\n        type=\"password\"\r\n        value={passField}\r\n        name=\"Password\"\r\n        onChange={({ target }) => setPassFunc(target.value)}\r\n      />\r\n    </div>\r\n    <button type=\"submit\">login</button>\r\n  </form>\r\n);\r\n\r\n// This is a small validation because this project is not using typescript\r\nLoginForm.propTypes = {\r\n  loginFunc: PropTypes.func.isRequired,\r\n  nameField: PropTypes.string.isRequired,\r\n  setNameFunc: PropTypes.func.isRequired,\r\n  passField: PropTypes.string.isRequired,\r\n  setPassFunc: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default LoginForm;\r\n","import PropTypes from 'prop-types';\r\n// This style sheet was created specifically for this component\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notification = ({ messageInfo }) => {\r\n  if (messageInfo === null) {\r\n    return (\r\n      null\r\n    );\r\n  }\r\n\r\n  const { message, status } = messageInfo;\r\n\r\n  // This will give the styles of each of the messages\r\n  if (status === 'positive') {\r\n    return (\r\n      <div className={styles.positiveContainer}>\r\n        <h2 className={styles.positiveMessage}>{message}</h2>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // If it's not positive, it will return the negative response\r\n  return (\r\n    <div className={styles.negativeContainer}>\r\n      <h2 className={styles.negativeMessage}>{message}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nNotification.propTypes = {\r\n  // shape instead of Object so it can be specified by property\r\n  // and Shape instead of objectOf because the categories are known before\r\n  messageInfo: PropTypes.shape({\r\n    message: PropTypes.string.isRequired,\r\n    status: PropTypes.oneOf(['positive', 'negative']),\r\n  }),\r\n};\r\n\r\n// Created default props so null can be accepted\r\nNotification.defaultProps = {\r\n  messageInfo: null,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { useState, useImperativeHandle } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Children is received from the default props.children desconstrured\r\n// So is ref, but has to be separated because it's not part of props\r\nconst Togglable = React.forwardRef(({ buttonLabel, children }, ref) => {\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  // This is the that will be shown depending of the visibility\r\n  const hideWhenVisible = { display: visible ? 'none' : '' };\r\n  const showWhenVisible = { display: visible ? '' : 'none' };\r\n\r\n  // Each time the button is pressed, the visible property\r\n  // Will change from false -> true or true -> false\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible);\r\n  };\r\n\r\n  // This exposes the function to the main App\r\n  // So it can be controlled by the parent\r\n  useImperativeHandle(ref, () => ({\r\n    toggleVisibility,\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button type=\"submit\" onClick={toggleVisibility}>{buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible}>\r\n        {/* The children are the object given to the togglable component under it's tree */}\r\n        {children}\r\n        <button type=\"button\" onClick={toggleVisibility}>Cancel</button>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n// This is a small validation because this project is not using typescript\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string.isRequired,\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Togglable;\r\n","const baseUrl = '/api/blogs';\r\n\r\nlet tokenToAuthorize = null;\r\n\r\nconst setToken = newToken => {\r\n  tokenToAuthorize = `bearer ${newToken}`;\r\n};\r\n\r\nconst methodToBackendReturnJson = async (url, method, body, tokenFromUser) => {\r\n  const response = await fetch(url, {\r\n    method,\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n      Authorization: tokenFromUser,\r\n    },\r\n    body,\r\n  });\r\n\r\n  // now it passes if it's just a satisfactory response\r\n  if (response.status < 200 || response.status > 299) {\r\n    throw new Error(`cannot fetch data with error code: ${response.status}`);\r\n  } else if (response.status === 204) {\r\n    // the 204 shouldn't have a json return, so this is necessary\r\n    return 'Blog deleted succesfully';\r\n  }\r\n\r\n  return response.json();\r\n};\r\n\r\nconst create = newObject => methodToBackendReturnJson(baseUrl, 'POST', JSON.stringify(newObject), tokenToAuthorize);\r\n\r\nconst update = (id, newObject) => methodToBackendReturnJson(`${baseUrl}/${id}`, 'PUT', JSON.stringify(newObject), tokenToAuthorize);\r\n\r\nconst deleteBlog = id => methodToBackendReturnJson(`${baseUrl}/${id}`, 'DELETE', '', tokenToAuthorize);\r\n\r\nconst getAll = async () => {\r\n  const response = await fetch(baseUrl);\r\n  return response.json();\r\n};\r\n\r\nconst exportedObject = {\r\n  getAll,\r\n  create,\r\n  update,\r\n  setToken,\r\n  deleteBlog,\r\n};\r\n\r\nexport default exportedObject;\r\n","const baseUrl = '/api/login';\r\n\r\n// This will login directly to the server\r\n// Returns a token, name and username\r\nconst login = async credentials => {\r\n  const response = await fetch(baseUrl, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  });\r\n  // Removed await because of redundancy\r\n  return response.json();\r\n};\r\n\r\nconst exportedFunc = {\r\n  login,\r\n};\r\n\r\nexport default exportedFunc;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport ListOfBlogs from './components/ListOfBlogs';\r\nimport NewBlogForm from './components/NewBlogForm';\r\nimport LoginForm from './components/LoginForm';\r\nimport Notification from './components/Notification';\r\nimport Togglable from './components/Togglable';\r\n\r\n// Both of this services loosely couple the backend with the frontend\r\nimport blogService from './services/blogs';\r\nimport loginService from './services/login';\r\n\r\nconst nameToStoreUserInfo = 'loggedBlogUser';\r\nconst NOTIFICATION = {\r\n  POSITIVE: 'positive',\r\n  NEGATIVE: 'negative',\r\n};\r\n\r\nconst App = () => {\r\n  const [blogs, setBlogs] = useState([]);\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [user, setUser] = useState(null);\r\n  const [notificationMessage, setNotificationMessage] = useState(null);\r\n  const newBlogFormRef = useRef();\r\n\r\n  useEffect(() => {\r\n    // It has to be an inner function\r\n    // Because useEffect functions have to be synchronous\r\n    // To avoid race conditions\r\n    const fetchBlogs = async () => {\r\n      const remoteBlogs = await blogService.getAll();\r\n      sortBlogsAndSetThem(remoteBlogs);\r\n    };\r\n    fetchBlogs();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // It checks whatever the localStorage has that variable\r\n    // The user is the one who is controlled\r\n    const loggedUserJSON = window.localStorage.getItem(nameToStoreUserInfo);\r\n    if (loggedUserJSON) {\r\n      const userInfo = JSON.parse(loggedUserJSON);\r\n      setUser(userInfo);\r\n      blogService.setToken(userInfo.token);\r\n    }\r\n  }, []);\r\n\r\n  // This is the main function that handles the login function\r\n  const handleLogin = async event => {\r\n    event.preventDefault();\r\n    try {\r\n      const loggedUserInfo = await loginService.login({\r\n        username, password,\r\n      });\r\n\r\n      window.localStorage.setItem(\r\n        'loggedNoteappUser', JSON.stringify(loggedUserInfo),\r\n      );\r\n      // This receives the token and cleans the usernames\r\n      blogService.setToken(loggedUserInfo.token);\r\n      // If the object returned has NOT a property called token\r\n      // A verification error will be shown to the user\r\n      if (!loggedUserInfo.token) {\r\n        createTemporalMessageFor5Secs('Wrong credentials', NOTIFICATION.NEGATIVE);\r\n        return;\r\n      }\r\n\r\n      createTemporalMessageFor5Secs('Succesfully logged!', NOTIFICATION.POSITIVE);\r\n      window.localStorage.setItem(nameToStoreUserInfo, JSON.stringify(loggedUserInfo));\r\n      setUser(loggedUserInfo);\r\n      setUsername('');\r\n      setPassword('');\r\n    } catch (exception) {\r\n      createTemporalMessageFor5Secs(exception, NOTIFICATION.NEGATIVE);\r\n    }\r\n  };\r\n\r\n  // This function will handle the the main app function\r\n  // and the connection to the backend service of the new blog\r\n  const addNewBlogToServer = async newBlogAddedByUser => {\r\n    try {\r\n      // Because of useRef, now the visibility function can be controlled from the exterior\r\n      newBlogFormRef.current.toggleVisibility();\r\n      // This connects directly to the backend through the handler\r\n      const respFromServ = await blogService.create(newBlogAddedByUser);\r\n\r\n      // This sets the blog response from server\r\n      // As an extra info, the userID it's not yet populated\r\n      sortBlogsAndSetThem(blogs.concat(respFromServ));\r\n\r\n      createTemporalMessageFor5Secs('A New blog was Created!', NOTIFICATION.POSITIVE);\r\n    } catch (exception) {\r\n      createTemporalMessageFor5Secs('An error ocurred', NOTIFICATION.NEGATIVE);\r\n    }\r\n  };\r\n\r\n  // This is the function that the logout button calls to\r\n  // So everything concerning the user is now deleted\r\n  const logOutFunction = () => {\r\n    window.localStorage.removeItem(nameToStoreUserInfo);\r\n    blogService.setToken('null');\r\n    createTemporalMessageFor5Secs('Logged out succesfully!', NOTIFICATION.POSITIVE);\r\n    setUser(null);\r\n  };\r\n\r\n  // Uses a PUT request so it always needs the whole blog to be replaced\r\n  const addLikeToABlog = async blogToAddANewLike => {\r\n    // Adds a 1 to the Like, and then simplified the user\r\n    // Because the backend expects an id, not an object in the user field\r\n    try {\r\n      const blogToSend = ({\r\n        ...blogToAddANewLike,\r\n        likes: blogToAddANewLike.likes + 1,\r\n        user: blogToAddANewLike.user.id,\r\n      });\r\n      const respFromServ = await blogService.update(blogToSend.id, blogToSend);\r\n\r\n      const blogsNowReplaced = replaceBlogWithSameIDInArray(respFromServ, blogs);\r\n\r\n      sortBlogsAndSetThem(blogsNowReplaced);\r\n      createTemporalMessageFor5Secs('A new like was added to the blog!', NOTIFICATION.POSITIVE);\r\n    } catch (exception) {\r\n      createTemporalMessageFor5Secs('An error happened', NOTIFICATION.NEGATIVE);\r\n    }\r\n  };\r\n\r\n  const removeBlog = async blogToRemove => {\r\n    try {\r\n      await blogService.deleteBlog(blogToRemove.id);\r\n      // This removes the blog visually too\r\n      const removedFromBlogs = blogs.filter(blog => blog.id !== blogToRemove.id);\r\n      sortBlogsAndSetThem(removedFromBlogs);\r\n\r\n      createTemporalMessageFor5Secs(`${blogToRemove.title} was removed.`,\r\n        NOTIFICATION.POSITIVE);\r\n    } catch (exception) {\r\n      createTemporalMessageFor5Secs('An error happened', NOTIFICATION.NEGATIVE);\r\n    }\r\n  };\r\n\r\n  // This replaces the blog wanted in a immutable way\r\n  const replaceBlogWithSameIDInArray = (blogToAdd, arrayOfBlogs) => {\r\n    const blogIndex = arrayOfBlogs.findIndex(\r\n      blog => blog.id === blogToAdd.id,\r\n    );\r\n      // This creates a new array wit the server response\r\n    const blogsNowReplaced = arrayOfBlogs.slice(0, blogIndex).concat(blogToAdd,\r\n      arrayOfBlogs.slice(blogIndex + 1));\r\n\r\n    return blogsNowReplaced;\r\n  };\r\n\r\n  // This creates a temporal error message to be shown to the user\r\n  const createTemporalMessageFor5Secs = (message, status) => {\r\n    setNotificationMessage({\r\n      message, status,\r\n    });\r\n    // After 5 secs, the notification should disappear\r\n    setTimeout(() => {\r\n      setNotificationMessage(null);\r\n    }, 5000);\r\n  };\r\n\r\n  // This is the function that will be used to order the blogs afters each change, sorted by like\r\n  // Can be changed easily after some time\r\n  const sortBlogsAndSetThem = arrayOfBlogs => {\r\n    const blogsOrdered = [...arrayOfBlogs].sort((actBlog, lastBlog) => {\r\n      if (actBlog.likes > lastBlog.likes) { return -1; }\r\n      if (lastBlog.likes > actBlog.likes) { return 1; }\r\n      return 0;\r\n    });\r\n    setBlogs(blogsOrdered);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Notification messageInfo={notificationMessage} />\r\n      {user === null\r\n        ? (\r\n          <LoginForm\r\n            loginFunc={handleLogin}\r\n            nameField={username}\r\n            setNameFunc={setUsername}\r\n            passField={password}\r\n            setPassFunc={setPassword}\r\n          />\r\n        )\r\n        : (\r\n          <div>\r\n            <div>\r\n              <p className=\"username-permanent\">\r\n                {user.username}\r\n                {' '}\r\n                logged in\r\n              </p>\r\n              <button onClick={logOutFunction} type=\"submit\">Log out</button>\r\n              {/* ref is a default prop, always given, like children */}\r\n              <Togglable buttonLabel=\"Create Blog\" ref={newBlogFormRef}>\r\n                <NewBlogForm\r\n                  createNewBlogServ={addNewBlogToServer}\r\n                  messageAsTitle=\"Create New Blog\"\r\n                />\r\n              </Togglable>\r\n            </div>\r\n            <ListOfBlogs\r\n              blogs={blogs}\r\n              likeFunction={addLikeToABlog}\r\n              removeBlogFunction={removeBlog}\r\n            />\r\n          </div>\r\n        )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"basicMessage\":\"Notification_basicMessage__2d-4h\",\"positiveMessage\":\"Notification_positiveMessage__3DAgH Notification_basicMessage__2d-4h\",\"negativeMessage\":\"Notification_negativeMessage__35Mq8 Notification_basicMessage__2d-4h\",\"positiveContainer\":\"Notification_positiveContainer__1jqN9\",\"negativeContainer\":\"Notification_negativeContainer__1MUBx\"};"],"sourceRoot":""}